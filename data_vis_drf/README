Original project backend link: https://github.com/davidayu/TreesDataVisBackend/tree/main/data_vis_drf
Original project frontend link: https://github.com/davidayu/TreesDataVisFrontend/tree/main/data_vis_react 
Senior project documentation: https://docs.google.com/document/d/1-8s0kJ4KuzY4qZIT6kmv2Z9DoWLL-Tkwd9cCTa4OzQE/edit?usp=sharing 

This Django DRF project contains APIs used to obtain information needed to visualize

Filtered average score: Trees.app collects student data by asking them questions and giving students recommendations based on the answers to their questions. The students complete the recommendations and then answer the same questions afterwards. We want to visualize how students’ answers change after completing their recommended tasks and view the data in a line graph.

Plan ratings and edits over time: Trees.app provides recommendations to students based on their questionnaire data. Students can then provide feedback on particular plans by giving them a rating of 1-5 stars. To better understand what is/isn’t working, we want to visualize how the score of plans change as we edit them. We also want to be able to revert to older versions of plans if they have a higher rating.


Database I use to pull information from: 

https://console.cloud.google.com/sql/instances/trees-db/connections/networking?project=peppy-primacy-286918 

The database table information is stored in models.py


Notes: 
- Call "py manage.py runserver" then follow the browser link in the terminal or open an empty browser tab before proceeding with the following examples. For each of the examples, paste the http link into the browser to call the APIs.
- The following APIs are implemented in views.py and urls.py

Filtered average score APIs:

  user_list: Gets all AccountUser in database. Specifying user_id will return only the user with that id

    ex. If I want to get all AccountUsers, 
      http://127.0.0.1:8000/user_list/

    ex. If I want to get AccountUser with id 72
      http://127.0.0.1:8000/user_list/72/

  question_text: Gets the text of a QuestionnaireQuestion with matching question_id

    ex. If I want to get the text of QuestionnaireQuestion with id 36
      http://127.0.0.1:8000/question_text/36/

  questionnaire_user_answers: Gets all QuestionnaireUseranswers from user with user_id that answer QuestionnaireQuestion with question_id

    ex. If I want to get the QuestionnaireUseranswers wheree user with id 72 answers question with id 36
      http://127.0.0.1:8000/questionnaire_user_answers/36/72/ 
  
Plan ratings and edits over time: 

  path_user_pathfeedback: Gets all PathUserpathfeedback for a particular path with path_id

    ex. If I want to get all PathUserpathfeedback for path with id 123
      http://127.0.0.1:8000/path_feedback/123/ 
